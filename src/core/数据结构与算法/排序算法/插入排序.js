/**
 * 插入排序 O(n^2)
 * 插入排序有这样一个前提：当前元素前面的序列是有序的。我们需要从后往前去寻找当前元素在前面有序序列里的正确位置。
 * 排序小型数组时，此算法比选择排序和冒泡排序性能要好，算法描述：  
 * 1. 从第一个元素开始，该元素可以认为已经被排序  
 * 2. 取出下一个元素，在已排序的元素序列中从后向前扫描  
 * 3. 如果该已排序元素大于当前元素，将该已排序元素移到下一位置  
 * 4. 重复步骤 3，直到找到已排序的元素小于或者等于当前元素的位置  
 * 5. 将当前元素插入到该位置后面  
 * 6. 重复步骤 2~5
 * 
 * 动图可以看该链接：https://zhuanlan.zhihu.com/p/42586566
 */

// 插入排序，从小到大排
function insertSort(arr) {
  const len = arr.length
  for (let i = 1; i < len; i++) {//假定第一项已经排序，所以遍历从第二个位置开始
    let j = i
    let target = arr[i]
    while (j > 0 && arr[j - 1] > target) {//只要变量j比0大，且数组前面的值比待比较的值大，就将前面的值下一位置，并减小j，直到找到已排序的元素小于或者等于新元素的位置，将新元素插入到该位置后 
      arr[j] = arr[j - 1]
      j--
    }
    arr[j] = target
  }
  return arr
}

console.log(insertSort([2, 3, 4, 1, 4, 1, 5]))